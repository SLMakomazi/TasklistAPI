package com.slmakomazi.tasklist.model;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.time.OffsetDateTime;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class TaskTest {

    private static Validator validator;

    @BeforeAll
    static void setUp() {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    }

    @Test
    void testTaskCreation() {
        // Given
        String description = "Test task";
        OffsetDateTime dueDate = OffsetDateTime.now().plusDays(1);

        // When
        Task task = new Task(description, dueDate);

        // Then
        assertNotNull(task);
        assertEquals(description, task.getDescription());
        assertEquals(dueDate, task.getDueDate());
        assertFalse(task.isCompleted());
        assertNull(task.getId()); // ID is generated by database
    }

    @Test
    void testDefaultConstructor() {
        // When
        Task task = new Task();

        // Then
        assertNotNull(task);
        assertNull(task.getDescription());
        assertNull(task.getDueDate());
        assertFalse(task.isCompleted());
    }

    @Test
    void testTaskValidation_ValidTask() {
        // Given
        Task task = new Task("Valid description", OffsetDateTime.now().plusDays(1));

        // When
        Set<ConstraintViolation<Task>> violations = validator.validate(task);

        // Then
        assertTrue(violations.isEmpty());
    }

    @Test
    void testTaskValidation_NullDescription() {
        // Given
        Task task = new Task(null, OffsetDateTime.now().plusDays(1));

        // When
        Set<ConstraintViolation<Task>> violations = validator.validate(task);

        // Then
        assertFalse(violations.isEmpty());
        assertTrue(violations.stream()
                .anyMatch(v -> v.getPropertyPath().toString().equals("description")));
    }

    @Test
    void testTaskValidation_BlankDescription() {
        // Given
        Task task = new Task("", OffsetDateTime.now().plusDays(1));

        // When
        Set<ConstraintViolation<Task>> violations = validator.validate(task);

        // Then
        assertFalse(violations.isEmpty());
        assertTrue(violations.stream()
                .anyMatch(v -> v.getPropertyPath().toString().equals("description")));
    }

    @Test
    void testTaskValidation_NullDueDate() {
        // Given
        Task task = new Task("Valid description", null);

        // When
        Set<ConstraintViolation<Task>> violations = validator.validate(task);

        // Then
        assertFalse(violations.isEmpty());
        assertTrue(violations.stream()
                .anyMatch(v -> v.getPropertyPath().toString().equals("dueDate")));
    }

    @Test
    void testTaskSettersAndGetters() {
        // Given
        Task task = new Task();
        String description = "Updated description";
        OffsetDateTime dueDate = OffsetDateTime.now().plusDays(2);
        Long id = 1L;

        // When
        task.setId(id);
        task.setDescription(description);
        task.setDueDate(dueDate);
        task.setCompleted(true);

        // Then
        assertEquals(id, task.getId());
        assertEquals(description, task.getDescription());
        assertEquals(dueDate, task.getDueDate());
        assertTrue(task.isCompleted());
    }
}
